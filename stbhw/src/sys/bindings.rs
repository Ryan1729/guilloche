/* automatically generated by rust-bindgen 0.59.1 */

pub type xs_seed = [u8; 16usize];
pub type xs_rng = [u32; 4usize];
extern "C" {
    pub fn xs_xorshift(rng: *mut xs_rng) -> u32;
}
extern "C" {
    pub fn xs_u32(rng: *mut xs_rng, min: u32, one_past_max: u32) -> u32;
}
extern "C" {
    pub fn xs_from_seed(seed: *mut u8, rng: *mut xs_rng);
}
extern "C" {
    pub fn xs_seed_global(seed: *mut u8);
}
extern "C" {
    pub fn xs_global_xorshift() -> u32;
}
extern "C" {
    pub fn xs_global_u32(min: u32, one_past_max: u32) -> u32;
}
extern "C" {
    pub fn stbhw_get_last_error() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn stbhw_build_tileset_from_image(
        ts: *mut stbhw_tileset,
        pixels: *mut ::std::os::raw::c_uchar,
        stride_in_bytes: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbhw_free_tileset(ts: *mut stbhw_tileset);
}
extern "C" {
    pub fn stbhw_generate_image(
        ts: *mut stbhw_tileset,
        weighting: *mut *mut ::std::os::raw::c_int,
        pixels: *mut ::std::os::raw::c_uchar,
        stride_in_bytes: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbhw_tile {
    pub a: ::std::os::raw::c_schar,
    pub b: ::std::os::raw::c_schar,
    pub c: ::std::os::raw::c_schar,
    pub d: ::std::os::raw::c_schar,
    pub e: ::std::os::raw::c_schar,
    pub f: ::std::os::raw::c_schar,
    pub pixels: [::std::os::raw::c_uchar; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbhw_tileset {
    pub is_corner: ::std::os::raw::c_int,
    pub num_color: [::std::os::raw::c_int; 6usize],
    pub short_side_len: ::std::os::raw::c_int,
    pub h_tiles: *mut *mut stbhw_tile,
    pub v_tiles: *mut *mut stbhw_tile,
    pub num_h_tiles: ::std::os::raw::c_int,
    pub max_h_tiles: ::std::os::raw::c_int,
    pub num_v_tiles: ::std::os::raw::c_int,
    pub max_v_tiles: ::std::os::raw::c_int,
}
#[doc = "  TEMPLATE GENERATOR  //////////////////////////"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbhw_config {
    pub is_corner: ::std::os::raw::c_int,
    pub short_side_len: ::std::os::raw::c_int,
    pub num_color: [::std::os::raw::c_int; 6usize],
    pub num_vary_x: ::std::os::raw::c_int,
    pub num_vary_y: ::std::os::raw::c_int,
    pub corner_type_color_template: [[::std::os::raw::c_int; 4usize]; 4usize],
}
extern "C" {
    pub fn stbhw_get_template_size(
        c: *mut stbhw_config,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbhw_make_template(
        c: *mut stbhw_config,
        data: *mut ::std::os::raw::c_uchar,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride_in_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type stbhw__process_rect = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut stbhw__process,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        e: ::std::os::raw::c_int,
        f: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbhw__process {
    pub ts: *mut stbhw_tileset,
    pub c: *mut stbhw_config,
    pub process_h_rect: stbhw__process_rect,
    pub process_v_rect: stbhw__process_rect,
    pub data: *mut ::std::os::raw::c_uchar,
    pub stride: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
